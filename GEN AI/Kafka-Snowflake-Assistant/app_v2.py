import streamlit as st
import snowflake.connector
import pandas as pd
from app_secrets import *
import google.generativeai as genai

genai.configure(api_key='AIzaSyC-jVXgj0ZNbElTyJ1w66gsi5Bgh_pU3mo')

# Set up the model
generation_config = {
    "temperature": 0.4,
    "top_p": 1,
    "top_k": 32,
    "max_output_tokens": 4096,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}
]

model = genai.GenerativeModel(model_name="gemini-pro",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

# Connection to Snowflake server
def get_snowflake_connection():
    return snowflake.connector.connect(
        user=SF_USER,
        password=SF_PASSWORD,
        account=SF_ACCOUNT,
        warehouse=SF_WAREHOUSE,
        database=SF_DATABASE,
        schema=SF_SCHEMA
    )


# Fetch Data from Snowflake with headers
def fetch_data_from_snowflake(query):
    conn = get_snowflake_connection()
    try:
        cursor = conn.cursor()
        cursor.execute(query)
        st.write(query)
        # Fetch all rows and column names
        rows = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]  # Get column names
        
        # Create a list of dictionaries for each row
        results = [dict(zip(columns, row)) for row in rows]
        
        return results  # Return results with headers
    finally:
        cursor.close()
        conn.close()



# Function to fetch table details
def fetch_table_details(table_name):
    conn = get_snowflake_connection()
    try:
        cursor = conn.cursor()
        query = f"DESC TABLE {table_name};"  # Describe the table to get its schema
        cursor.execute(query)
        rows = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]  # Get column names
        
        # Create a DataFrame for better display
        results = pd.DataFrame(rows, columns=columns)
        
        return results  # Return results with headers
    finally:
        cursor.close()
        conn.close()

prompt_parts_1 = [
    """You are an expert in converting English questions to SQL code for SNOWFLAKE Database! You are expert in writing snowflake queries! The snowflake database is SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL and table name is CALL_CENTER. 
    \n```\n\nDont include ``` and \n or \n in the output and also dont include ` and '\n' and sql in output
    example:
     use asks : what is the count of the table 
     result : select count(*) from  SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CALL_CENTER;
    example:
    user : what are the tables 
    result : SELECT * FROM SNOWFLAKE_SAMPLE_DATA.INFORMATION_SCHEMA.TABLES"""
]

# Function to fetch all tables in the current database
def fetch_all_tables():
    conn = get_snowflake_connection()
    try:
        cursor = conn.cursor()
        query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE';"
        cursor.execute(query)
        rows = cursor.fetchall()
        
        # Extract table names from the results
        table_names = [row[0] for row in rows]
        
        return table_names  # Return list of table names
    finally:
        cursor.close()
        conn.close()

def generate_gemini_response(question, input_prompt):
    prompt_parts = [input_prompt, question]
    response = model.generate_content(prompt_parts)
    
    # Fetch data from Snowflake using the SQL generated by Gemini
    output = fetch_data_from_snowflake(response.text.replace('\n', ' '))
    
    st.write("Next query Please")
    
    return output


# Streamlit Title 
st.title("Big Heros 4 App")
st.write("Welcome to Big Heros 4 running in Google Colab!")

# Sidebar for navigation
st.sidebar.title("Navigation")
tab_selection = st.sidebar.radio("Select Tab", ["Query Data", "Table Details"])

if tab_selection == "Query Data":
    user_input = st.text_input("Type something:")
    if st.button("Submit"):
        st.write(f"You typed: {user_input}")
        
        result = generate_gemini_response(user_input, prompt_parts_1[0])
        st.write(result)
        # Display the results with headers
        if isinstance(result, list) and len(result) > 0:
            df = pd.DataFrame(result)  # Convert result to DataFrame for better display
            st.write(df)
        else:
            st.write("No results found.")

elif tab_selection == "Table Details":
    table_name = st.text_input("Enter the table name (e.g., CALL_CENTER):")
    if st.button("Get Table Details"):
        if table_name:
            details = fetch_table_details(table_name)
            if details is not None and not details.empty:
                st.write(f"Details for table: {table_name}")
                st.dataframe(details)  # Display the table details as a DataFrame
            else:
                st.write("No details found for the specified table.")

# Right sidebar to list all tables with scroll functionality
st.sidebar.title("Available Tables")
with st.sidebar.expander("View All Tables", expanded=True):
    tables = fetch_all_tables()
    if tables:
        selected_table = st.selectbox("Select a Table", tables)
        
# Optionally, you can add functionality to display details of the selected table from the right sidebar.
if selected_table:
    details = fetch_table_details(selected_table)
    if details is not None and not details.empty:
        st.sidebar.write(f"Details for selected table: {selected_table}")
        st.sidebar.dataframe(details)  # Display selected table's details in the sidebar

